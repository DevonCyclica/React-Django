# Generated by Django 3.1.5 on 2021-01-25 16:23

from django.db import migrations, models
import django.db.models.deletion

from PyDictionary import PyDictionary


def fill_models(apps, schema):
    Word = apps.get_model('sampleapp', 'Word')

    dictionary = PyDictionary()

    def myFunc(x):
        if x.count(' ') or x.count('-'):
           return False
        else:
           return True

    words = ["hello", "goodbye", "life", "gargantuan", "run", "slow", "water", "imagination", "science", "realistic"]
    word_objs = []
    word_id_map = {}
    i = 0
    pos_id_map = {}
    pos_objs = []
    for word in words:
        word_objs.append(Word(word=word, id=i, full_word=True))
        word_id_map[word] = i

        i += 1

    synonym_through = Word.synonyms.through

    synonym_objs = []

    for word in words:
        synonyms = filter(myFunc, dictionary.synonym(word))

        for synonym in synonyms:
            if synonym not in word_id_map:
                word_objs.append(Word(word=synonym, id=i))
                word_id_map[synonym] = i
                i += 1
            synonym_objs.append(synonym_through(from_word_id=word_id_map[word], to_word_id=word_id_map[synonym]))

    Word.objects.bulk_create(word_objs)
    synonym_through.objects.bulk_create(synonym_objs)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Word',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=50, unique=True)),
                ('full_word', models.BooleanField(default=False)),
                ('synonyms', models.ManyToManyField(related_name='related_synonyms', to='sampleapp.Word')),
            ],
        ),
        migrations.RunPython(fill_models, migrations.RunPython.noop)
    ]
